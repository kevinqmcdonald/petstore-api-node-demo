openapi: "3.0.0"
info:
  version: "1.0"
  title: "PetStore"
  description: Browse and buy different pets

servers:
  - url: http://localhost:3000/api
    description: Local development server

paths:
  /admin/users/{id}:
    get:
      summary: Get User
      description: Gets the user with the given ID
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the user to fetch"
          required: true
          schema:
            $ref: "#/components/schemas/Id"
      responses:
        "200":
          description: "User found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
              example:
                id: 1
                username: test
                password: test
                role: default
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          description: "Unexpected error"
  /pets:
    get:
      summary: Get All Pets
      description: "Gets all pets"
      responses:
        "200":
          description: "Pets found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PetCollection"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          description: "Unexpected error"
  /admin/pets/{id}:
    put:
      summary: Update Pet
      description: Updates a single pet
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the pet to update"
          required: true
          schema:
            $ref: "#/components/schemas/Id"
      requestBody:
        description: Updated pet details
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Pet"
            example:
              name: "Rover"
              species: Dog
              age: 2
      responses:
        "200":
          description: "Pet updated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
        "400":
          $ref: "#/components/responses/RequestBodyError"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          description: "Unexpected error"
  /orders:
    post:
      summary: Create Order
      description: "Creates a new order"
      requestBody:
        description: Order details
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
            example:
              petId: 1
              price: 19.99
      responses:
        "201":
          description: "Order created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          $ref: "#/components/responses/RequestBodyError"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          description: "Unexpected error"

components:
  schemas:
    Id:
      type: integer
      minimum: 1
      example: 1
    User:
      type: object
      description: A user model
      required:
        - username
        - password
        - role
      properties:
        id:
          type: integer
          format: int32
          minimum: 1
          readOnly: true
        username:
          type: string
        password:
          type: string
        role:
          type: string
      example:
        id: 1
        username: testUser
        password: testPassword
        role: default
    Pet:
      type: object
      description: A pet model
      required:
        - name
        - species
        - age
      properties:
        id:
          type: integer
          format: int32
          minimum: 1
          readOnly: true
        name:
          type: string
        species:
          type: string
        age:
          type: integer
          format: int32
          minimum: 0
      example:
        id: 1
        name: Rover
        species: Dog
        age: 2
    PetCollection:
      type: array
      description: A collection of Pets
      items:
        $ref: "#/components/schemas/Pet"
      example:
        - id: 1
          name: Rover
          species: Dog
          age: 2
        - id: 2
          name: Mittens
          species: Cat
          age: 3
    Order:
      type: object
      description: An order model
      required:
        - petId
        - price
      properties:
        id:
          type: integer
          format: int32
          minimum: 1
          readOnly: true
        petId:
          type: integer
          format: int32
          minimum: 1
        price:
          type: number
          format: float
          minimum: 0
      example:
        id: 1
        petId: 1
        price: 19.99
    Error:
      type: object
      description: API error model
      required:
        - _original
        - details
      properties:
        _original:
          type: object
          description: The original request body
        details:
          type: array
          description: Details of each error
          items:
            type: object
      example:
        _original:
          id: 1
          petId: 1
          price: 19.99
        details:
          - message: \"id\" is not allowed
            path:
              - id
            type: object.unknown
            context:
              child: id
              label: id
              value: 1
              key: id
    ErrorMessage:
      type: string
      description: Error message
      example: The user with given ID was not found
  responses:
    Unauthenticated:
      description: Credentials are missing or invalid
      headers:
        WWW-Authenticate:
          schema:
            type: string
    Unauthorized:
      description: User does not have permission to access resource
      headers:
        WWW-Authenticate:
          schema:
            type: string
    NotFound:
      description: "Resource not found"
      content:
        text/plain:
          schema:
            $ref: "#/components/schemas/ErrorMessage"
    RequestBodyError:
      description: "Error with request body"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
  securitySchemes:
    basic:
      type: http
      scheme: basic

security:
  - basic: []
